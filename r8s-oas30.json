{
  "openapi": "3.0.1",
  "info": {
    "title": "r8s-api",
    "version": "2024-08-22T08:33:38Z"
  },
  "servers": [
    {
      "url": "https://{host}.execute-api.eu-central-1.amazonaws.com/{basePath}",
      "variables": {
        "basePath": {
          "default": "r8s"
        },
        "host": {
          "default": "REPLACE ME"
        }
      }
    }
  ],
  "paths": {
    "/signin": {
      "post": {
        "tags": [
          "Sign In"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignInResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          }
        },
        "security": []
      },
      "options": {
        "tags": [
          "Sign In"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        },
        "security": []
      }
    },
    "/signup": {
      "post": {
        "tags": [
          "Sign Up"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "options": {
        "tags": [
          "Sign Up"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      }
    },
    "/users": {
      "options": {
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get user information.",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Username"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update existing user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete user record.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/health-check": {
      "options": {
        "tags": [
          "Health Check"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "post": {
        "tags": [
          "Health Check"
        ],
        "summary": "Performs system health check.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthCheckRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/roles": {
      "options": {
        "tags": [
          "Role"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get role information.",
        "tags": [
          "Role"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "role_name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Role name."
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Role"
        ],
        "summary": "Create new role.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Role"
        ],
        "summary": "Update existing role.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolePatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Role"
        ],
        "summary": "Delete role record.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/policies": {
      "options": {
        "tags": [
          "Policy"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get policy information",
        "tags": [
          "Policy"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "policy_name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Policy name."
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        }
      },
      "post": {
        "tags": [
          "Policy"
        ],
        "summary": "Create new policy.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Policy"
        ],
        "summary": "Update Existing policy.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyPatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Policy"
        ],
        "summary": "Delete policy record.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/storages": {
      "options": {
        "tags": [
          "Storage"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get storage information.",
        "tags": [
          "Storage"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "storage_name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Storage name"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Storage"
        ],
        "summary": "Create new storage.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorageModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Storage"
        ],
        "summary": "Update existing storage.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorageModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Storage"
        ],
        "summary": "Delete storage record.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/storages/data": {
      "options": {
        "tags": [
          "Storage"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Describe available metrics in storage.",
        "tags": [
          "Storage"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "data_source",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Storage name"
          },
          {
            "in": "query",
            "name": "customer",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Describe metrics for customer"
          },
          {
            "in": "query",
            "name": "tenant",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Describe metrics for tenant"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Describe only metrics withing region"
          },
          {
            "in": "query",
            "name": "timestamp",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Describe only metrics for a specific timestamp"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageDataResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/algorithms": {
      "options": {
        "tags": [
          "Algorithm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get algorithm information.",
        "tags": [
          "Algorithm"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "algorithm_name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Algorithm name"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlgorithmResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Algorithm"
        ],
        "summary": "Create new algorithm.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlgorithmPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlgorithmResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Algorithm"
        ],
        "summary": "Update existing algorithm.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlgorithmPatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlgorithmResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Algorithm"
        ],
        "summary": "Delete algorithm record.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/shapes": {
      "options": {
        "tags": [
          "Shape"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get shape information.",
        "tags": [
          "Shape"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Shape name"
          },
          {
            "in": "query",
            "name": "cloud",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AWS",
                "AZURE",
                "GOOGLE"
              ]
            },
            "description": "Describe only shapes of specific cloud"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShapeResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Shape"
        ],
        "summary": "Create new shape.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShapePostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShapeResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Shape"
        ],
        "summary": "Update existing shape.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShapePatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShapeResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Shape"
        ],
        "summary": "Delete shape record.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/shapes/prices": {
      "options": {
        "tags": [
          "ShapePrice"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get shape price information.",
        "tags": [
          "ShapePrice"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Shape name"
          },
          {
            "in": "query",
            "name": "cloud",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AWS",
                "AZURE",
                "GOOGLE"
              ]
            },
            "description": "Describe only shape prices for a cloud"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Describe only shape prices for a region"
          },
          {
            "in": "query",
            "name": "os",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "WINDOWS",
                "LINUX"
              ]
            },
            "description": "Describe only shape prices for specific OS"
          },
          {
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Describe only shape prices for specific customer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShapePriceResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "ShapePrice"
        ],
        "summary": "Create new shape price.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShapePricePostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShapePriceResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "ShapePrice"
        ],
        "summary": "Update existing shape price.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShapePricePatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShapePriceResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ShapePrice"
        ],
        "summary": "Delete shape price record.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/jobs": {
      "options": {
        "tags": [
          "Job"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get job information.",
        "tags": [
          "Job"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "job_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Job Id"
          },
          {
            "in": "query",
            "name": "job_name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Job Name"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Maximum number of jobs to describe"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Job"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobPostRequest"
              }
            }
          }
        },
        "summary": "Submits new job.",
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Job"
        ],
        "summary": "Terminates running job.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/recommendations": {
      "options": {
        "tags": [
          "Recommendation"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get recommendations.",
        "tags": [
          "Recommendation"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "instance_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Get only recommendation for instance"
          },
          {
            "in": "query",
            "name": "recommendation_type",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Get only recommendation with a specific type"
          },
          {
            "in": "query",
            "name": "job_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Get only recommendation from a specific job"
          },
          {
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Get only recommendation for a specific customer"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecommendationHistoryResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Recommendation"
        ],
        "summary": "Set recommendation feedback.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecommendationHistoryPatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecommendationHistoryResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/applications": {
      "options": {
        "tags": [
          "Application"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get RIGHTSIZER application information.",
        "tags": [
          "Application"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "application_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Application id to describe"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Application"
        ],
        "summary": "Create new RIGHTSIZER application.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RIGHTSIZERApplicationPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Application"
        ],
        "summary": "Update existing application.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationPatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Application"
        ],
        "summary": "Deactivate application.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/applications/licenses": {
      "options": {
        "tags": [
          "Application"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get RIGHTSIZER_LICENSES application information.",
        "tags": [
          "Application"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "application_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Application id"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Application"
        ],
        "summary": "Activates new license.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationLicensesPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Application"
        ],
        "summary": "Delete RIGHTSIZER_LICENSES Application record.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/applications/policies": {
      "options": {
        "tags": [
          "Application"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get application policies information.",
        "tags": [
          "Application"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "application_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Application id to describe policies for"
          },
          {
            "in": "query",
            "name": "group_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Group policy id"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationPolicyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Application"
        ],
        "summary": "Add new group policy to Application.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationPolicyPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationPolicyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Application"
        ],
        "summary": "Remove group policy from application.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/applications/dojo": {
      "options": {
        "tags": [
          "Application"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Describe DEFECT_DOJO Application information.",
        "tags": [
          "Application"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "application_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Application ID"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Application"
        ],
        "summary": "Register new DEFECT_DOJO application.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationDojoPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Application"
        ],
        "summary": "Delete application record.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/parents": {
      "options": {
        "tags": [
          "Parent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get parent information.",
        "tags": [
          "Parent"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "application_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Application ID"
          },
          {
            "in": "query",
            "name": "parent_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Parent ID"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParentResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Parent"
        ],
        "summary": "Create new parent (Activates license for Tenant).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParentPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParentResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Parent"
        ],
        "summary": "Deactivates parent record.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/parents/dojo": {
      "options": {
        "tags": [
          "Parent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get RIGHTSIZER_SIEM_DEFECT_DOJO Parent information.",
        "tags": [
          "Parent"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "application_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Describe RIGHTSIZER_SIEM_DEFECT_DOJO linked to Application ID"
          },
          {
            "in": "query",
            "name": "parent_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "RIGHTSIZER_SIEM_DEFECT_DOJO Parent id"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParentResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Parent"
        ],
        "summary": "Activate DefectDojo for tenant(s).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParentDojoPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParentResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Parent"
        ],
        "summary": "Delete RIGHTSIZER_SIEM_DEFECT_DOJO parent record.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/parents/insights/resize": {
      "options": {
        "tags": [
          "Parent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Describes r8s shape selection logic insights.",
        "tags": [
          "Parent"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "parent_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Parent ID"
          },
          {
            "in": "query",
            "name": "instance_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Native instance type name to test"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParentResizeInsightsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/licenses": {
      "options": {
        "tags": [
          "License"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get license information.",
        "tags": [
          "License"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "license_key",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "License key to describe"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "License"
        ],
        "summary": "Delete license record.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/licenses/sync": {
      "options": {
        "tags": [
          "License"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "post": {
        "tags": [
          "License"
        ],
        "summary": "Sync license with License Manager.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseSyncRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/reports": {
      "options": {
        "tags": [
          "Report"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Generate job report.",
        "tags": [
          "Report"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Job id to generate report"
          },
          {
            "in": "query",
            "name": "customer",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Generate report for customer"
          },
          {
            "in": "query",
            "name": "cloud",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AWS",
                "AZURE",
                "GOOGLE"
              ]
            },
            "description": "Generate report for cloud"
          },
          {
            "in": "query",
            "name": "tenant",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Generate report for tenant"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Generate report for region"
          },
          {
            "in": "query",
            "name": "instance_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Generate report for instance"
          },
          {
            "in": "query",
            "name": "detailed",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Detailed version of the report"
          },
          {
            "in": "query",
            "name": "report_type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "download"
              ]
            },
            "description": "To obtain s3 presigned url for the generated report"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobReportResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/reports/mail/tenant": {
      "options": {
        "tags": [
          "Report"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Initiate tenant mail report.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantMailReportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/parents/shape-rules": {
      "options": {
        "tags": [
          "Parent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get parent shape rules information.",
        "tags": [
          "Parent"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "parent_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Parent id"
          },
          {
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Shape rule id"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShapeRuleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Parent"
        ],
        "summary": "Add new shape rule to parent.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShapeRulePostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShapeRuleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Parent"
        ],
        "summary": "Update existing Shape rule.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShapeRulePatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShapeRuleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Parent"
        ],
        "summary": "Delete parent shape rule record.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/parents/shape-rules/dry-run": {
      "options": {
        "tags": [
          "Parent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Describes shapes that satisfy all of the specified Parent rules.",
        "tags": [
          "Parent"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "parent_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Parent id to perform dry run on shape rules"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShapeRuleDryRunResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/settings/license-manager/config": {
      "options": {
        "tags": [
          "Setting"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get License Manager config information.",
        "tags": [
          "Setting"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenceManagerConfigResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Setting"
        ],
        "summary": "Create License Manager config setting.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenceManagerConfigModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenceManagerConfigResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Setting"
        ],
        "summary": "Delete license manager config setting.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    },
    "/settings/license-manager/client": {
      "options": {
        "tags": [
          "Setting"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EmptyResponse"
          }
        }
      },
      "get": {
        "summary": "Get License Manager client information.",
        "tags": [
          "Setting"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Format of the public key"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenceManagerClientResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Setting"
        ],
        "summary": "Create License Manager client setting.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenceManagerClientRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string"
                }
              },
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenceManagerClientResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestErrorResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Setting"
        ],
        "summary": "Delete license manager client setting.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "authorizer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "x-amazon-apigateway-authtype": "cognito_user_pools"
      }
    },
    "schemas": {
      "Empty": {
        "title": "Empty Schema",
        "type": "object"
      },
      "MessageResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message response"
          }
        }
      },
      "NotFoundErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "No {entity_name} found matching given query"
          }
        }
      },
      "UnauthorizedErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Unauthorized"
          }
        }
      },
      "ForbiddenErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "User {username} is not authorized to access {endpoint}"
          }
        }
      },
      "InternalServerErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Internal Server Error"
          }
        }
      },
      "BadRequestErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Bad Request. The following parameters are missing: {parameters}"
          }
        }
      },
      "RoleModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Role name"
          },
          "expiration": {
            "type": "string",
            "format": "date-time",
            "description": "Role expiration date"
          },
          "policies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of policies associated with the role"
          },
          "resource": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of resources associated with the role"
          }
        }
      },
      "RolePatchRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Role name to update"
          },
          "expiration": {
            "type": "string",
            "format": "date-time",
            "description": "Role expiration date"
          },
          "policies_to_attach": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of policies to attach to role"
          },
          "policies_to_detach": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of policies to detach from role"
          }
        }
      },
      "RoleDeleteRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Role name to update"
          }
        }
      },
      "PolicyModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 30,
            "description": "Policy name"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions associated with the policy"
          }
        }
      },
      "PolicyPatchRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Policy name to update"
          },
          "permissions_to_attach": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions to attach to policy"
          },
          "permissions_to_detach": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions to detach from policy"
          }
        }
      },
      "SettingModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Setting name"
          },
          "value": {
            "type": "object",
            "description": "Dynamic value. Can be any type (string, number, list, dictionary)"
          }
        }
      },
      "StorageModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Storage name"
          },
          "service": {
            "type": "string",
            "enum": [
              "S3_BUCKET"
            ],
            "description": "Storage service"
          },
          "type": {
            "type": "string",
            "enum": [
              "DATA_SOURCE",
              "STORAGE"
            ],
            "description": "Storage type"
          },
          "access": {
            "type": "object",
            "properties": {
              "bucket_name": {
                "type": "string",
                "description": "S3 bucket name"
              },
              "prefix": {
                "type": "string",
                "description": "S3 prefix (optional)"
              }
            }
          }
        }
      },
      "StorageDataModel": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "string",
            "description": "Metric file customer"
          },
          "tenant": {
            "type": "string",
            "description": "Metric file tenant"
          },
          "region": {
            "type": "string",
            "description": "Metric file region type"
          },
          "timestamp": {
            "type": "string",
            "description": "Metric file timestamp"
          },
          "instance_id": {
            "type": "string",
            "description": "Metric file instance ID"
          }
        }
      },
      "JobModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Job ID"
          },
          "name": {
            "type": "string",
            "description": "Job name"
          },
          "owner": {
            "type": "string",
            "description": "Job owner"
          },
          "job_queue": {
            "type": "string",
            "description": "Job queue"
          },
          "parent_id": {
            "type": "string",
            "description": "Parent job ID"
          },
          "application_id": {
            "type": "string",
            "description": "Application ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Created at"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "Started at"
          },
          "stopped_at": {
            "type": "string",
            "format": "date-time",
            "description": "Stopped at"
          },
          "submitted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Submitted at"
          },
          "status": {
            "type": "string",
            "enum": [
              "STARTED",
              "RUNNABLE",
              "RUNNING",
              "SUCCEEDED",
              "FAILED"
            ],
            "description": "Job status"
          },
          "tenant_status_map": {
            "type": "object",
            "description": "Tenant status map"
          },
          "fail_reason": {
            "type": "string",
            "description": "Fail reason"
          }
        }
      },
      "JobReportModel": {
        "type": "object",
        "properties": {
          "resource_id": {
            "type": "string",
            "description": "Resource id"
          },
          "customer": {
            "type": "string",
            "description": "Resource customer"
          },
          "cloud": {
            "type": "string",
            "description": "Resource cloud",
            "enum": [
              "AWS",
              "AZURE",
              "GOOGLE"
            ]
          },
          "tenant": {
            "type": "string",
            "description": "Resource tenant"
          },
          "region": {
            "type": "string",
            "description": "Resource region"
          },
          "recommendation": {
            "type": "object",
            "properties": {
              "schedule": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Recommended schedule"
              },
              "recommended_shapes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Recommended shapes"
              }
            },
            "description": "Recommendation"
          },
          "general_actions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Recommended actions"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "Started at"
          },
          "stopped_at": {
            "type": "string",
            "format": "date-time",
            "description": "Stopped at"
          },
          "submitted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Submitted at"
          },
          "status": {
            "type": "string",
            "enum": [
              "STARTED",
              "RUNNABLE",
              "RUNNING",
              "SUCCEEDED",
              "FAILED"
            ],
            "description": "Job status"
          },
          "tenant_status_map": {
            "type": "object",
            "description": "Tenant status map"
          },
          "fail_reason": {
            "type": "string",
            "description": "Fail reason"
          }
        }
      },
      "UserModel": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "User ID"
          },
          "sub": {
            "type": "string",
            "description": "Unique identifier"
          },
          "customer": {
            "type": "string",
            "description": "Customer associated with the user"
          },
          "role": {
            "type": "string",
            "description": "Role associated with the user"
          },
          "password": {
            "type": "string",
            "description": "Password"
          },
          "latest_login": {
            "type": "string",
            "description": "Timestamp of the latest login"
          }
        }
      },
      "ShapeModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Shape name"
          },
          "resource_type": {
            "type": "string",
            "enum": [
              "VM",
              "RDS"
            ],
            "description": "Resource type"
          },
          "cloud": {
            "type": "string",
            "enum": [
              "AWS",
              "AZURE",
              "GOOGLE"
            ],
            "description": "Cloud provider"
          },
          "cpu": {
            "type": "number",
            "format": "float",
            "description": "CPU cores"
          },
          "memory": {
            "type": "number",
            "format": "float",
            "description": "Memory (in GB)"
          },
          "network_throughput": {
            "type": "number",
            "format": "float",
            "description": "Network throughput (in Mbps)"
          },
          "iops": {
            "type": "number",
            "format": "float",
            "description": "IOPS"
          },
          "family_type": {
            "type": "string",
            "description": "Family type"
          },
          "physical_processor": {
            "type": "string",
            "description": "Physical processor"
          },
          "architecture": {
            "type": "string",
            "description": "Architecture"
          },
          "added_at": {
            "type": "string",
            "format": "date-time",
            "description": "Added at"
          },
          "engines": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Supported engines"
          },
          "storage_types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Supported storage types"
          }
        }
      },
      "ShapeRuleModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Shape rule id"
          },
          "parent_id": {
            "type": "string",
            "description": "Shape rule Parent ID"
          },
          "action": {
            "type": "string",
            "enum": [
              "allow",
              "deny",
              "prioritize"
            ],
            "description": "Shape rule action"
          },
          "condition": {
            "type": "string",
            "enum": [
              "contains",
              "not_contains",
              "equals",
              "matches",
              "not_matches"
            ],
            "description": "Shape rule condition"
          },
          "field": {
            "type": "string",
            "enum": [
              "name",
              "family_type",
              "equals",
              "physical_processor",
              "architecture"
            ],
            "description": "Shape rule target field"
          },
          "value": {
            "type": "string",
            "description": "Shape rule condition value"
          }
        }
      },
      "ShapeRuleDryRunModel": {
        "type": "object",
        "properties": {
          "cloud": {
            "type": "string",
            "enum": [
              "AWS",
              "AZURE",
              "GOOGLE"
            ],
            "description": "Cloud"
          },
          "total_shapes": {
            "type": "number",
            "description": "Total shapes available for cloud"
          },
          "allowed_for_parent": {
            "type": "integer",
            "description": "Total shapes allowed by parent configuration"
          },
          "shape_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of allowed shape names"
          }
        }
      },
      "ShapePriceModel": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "string",
            "description": "Customer name"
          },
          "cloud": {
            "type": "string",
            "enum": [
              "AWS",
              "GCP",
              "AZURE"
            ],
            "description": "Cloud provider"
          },
          "name": {
            "type": "string",
            "description": "Shape name"
          },
          "region": {
            "type": "string",
            "description": "Cloud Provider Region"
          },
          "os": {
            "type": "string",
            "enum": [
              "WINDOWS",
              "LINUX"
            ],
            "description": "Operating system"
          },
          "on_demand": {
            "type": "number",
            "format": "float",
            "description": "On-demand price"
          },
          "reserved_1y": {
            "type": "number",
            "format": "float",
            "description": "Reserved 1-year price"
          },
          "reserved_3y": {
            "type": "number",
            "format": "float",
            "description": "Reserved 3-year price"
          },
          "dedicated": {
            "type": "number",
            "format": "float",
            "description": "Dedicated price"
          }
        }
      },
      "RecommendationHistoryModel": {
        "type": "object",
        "properties": {
          "resource_id": {
            "type": "string",
            "description": "Resource ID"
          },
          "resource_type": {
            "type": "string",
            "enum": [
              "INSTANCE",
              "GROUP"
            ],
            "description": "Resource type"
          },
          "job_id": {
            "type": "string",
            "description": "Job ID"
          },
          "customer": {
            "type": "string",
            "description": "Customer name"
          },
          "tenant": {
            "type": "string",
            "description": "Tenant name"
          },
          "region": {
            "type": "string",
            "description": "Resource Region"
          },
          "added_at": {
            "type": "string",
            "format": "date-time",
            "description": "Added at"
          },
          "current_instance_type": {
            "type": "string",
            "description": "Current instance type"
          },
          "current_month_price_usd": {
            "type": "number",
            "format": "float",
            "description": "Current month price (USD)"
          },
          "recommendation_type": {
            "type": "string",
            "enum": [
              "SCHEDULE",
              "SHUTDOWN",
              "SCALE_UP",
              "SCALE_DOWN",
              "CHANGE_SHAPE",
              "SPLIT"
            ],
            "description": "Recommendation type"
          },
          "recommendation": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Recommendation details"
          },
          "savings": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Savings details"
          },
          "instance_meta": {
            "type": "object",
            "description": "Instance metadata"
          },
          "feedback_dt": {
            "type": "string",
            "format": "date-time",
            "description": "Feedback date"
          },
          "feedback_status": {
            "type": "string",
            "enum": [
              "APPLIED",
              "DONT_RECOMMEND",
              "NO_ANSWER",
              "WRONG",
              "TOO_LARGE",
              "TOO_SMALL",
              "TOO_SHORT",
              "TOO_LONG"
            ],
            "description": "Feedback status"
          },
          "last_metric_capture_date": {
            "type": "string",
            "format": "date-time",
            "description": "Last metric capture date"
          }
        }
      },
      "RecommendationHistoryPatchRequest": {
        "type": "object",
        "properties": {
          "instance_id": {
            "type": "string",
            "description": "Instance ID"
          },
          "customer": {
            "type": "string",
            "description": "Customer name"
          },
          "recommendation_type": {
            "type": "string",
            "enum": [
              "SCHEDULE",
              "SHUTDOWN",
              "SCALE_UP",
              "SCALE_DOWN",
              "CHANGE_SHAPE",
              "SPLIT"
            ],
            "description": "Recommendation type"
          },
          "feedback_status": {
            "type": "string",
            "enum": [
              "APPLIED",
              "DONT_RECOMMEND",
              "NO_ANSWER",
              "WRONG",
              "TOO_LARGE",
              "TOO_SMALL",
              "TOO_SHORT",
              "TOO_LONG"
            ],
            "description": "Feedback status"
          }
        }
      },
      "AlgorithmModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Algorithm name"
          },
          "resource_type": {
            "type": "string",
            "description": "Resource type"
          },
          "customer": {
            "type": "string",
            "description": "Customer name"
          },
          "cloud": {
            "type": "string",
            "description": "Cloud provider"
          },
          "licensed": {
            "type": "boolean",
            "description": "If algorithm is licensed"
          },
          "metric_format": {
            "type": "object",
            "properties": {
              "delimiter": {
                "type": "string",
                "minLength": 1,
                "maxLength": 2,
                "description": "Delimiter"
              },
              "skipinitialspace": {
                "type": "boolean",
                "description": "Skip initial space"
              },
              "lineterminator": {
                "type": "string",
                "minLength": 1,
                "maxLength": 3,
                "description": "Line terminator"
              },
              "quotechar": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1,
                "description": "Quote character"
              },
              "quoting": {
                "type": "integer",
                "enum": [
                  0,
                  1,
                  2,
                  3
                ],
                "description": "Quoting mode"
              },
              "escapechar": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1,
                "description": "Escape character"
              },
              "doublequote": {
                "type": "boolean",
                "description": "Double quote"
              }
            }
          },
          "required_data_attributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Required data attributes"
          },
          "metric_attributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Metric attributes"
          },
          "timestamp_attribute": {
            "type": "string",
            "description": "Timestamp attribute"
          },
          "clustering_settings": {
            "type": "object",
            "properties": {
              "max_clusters": {
                "type": "integer",
                "minimum": 1,
                "maximum": 10,
                "description": "Maximum clusters"
              },
              "wcss_kmeans_init": {
                "type": "string",
                "enum": [
                  "k-means++",
                  "random"
                ],
                "description": "K-means initialization"
              },
              "wcss_kmeans_max_iter": {
                "type": "integer",
                "minimum": 1,
                "maximum": 1000,
                "description": "K-means maximum iterations"
              },
              "wcss_kmeans_n_init": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100,
                "description": "K-means number of initializations"
              },
              "knee_interp_method": {
                "type": "string",
                "enum": [
                  "interp1d",
                  "polynomial"
                ],
                "description": "Knee interpolation method"
              },
              "knee_polynomial_degree": {
                "type": "integer",
                "minimum": 1,
                "maximum": 20,
                "description": "Knee polynomial degree"
              }
            }
          },
          "recommendation_settings": {
            "type": "object",
            "properties": {
              "record_step_minutes": {
                "type": "integer",
                "minimum": 1,
                "maximum": 60,
                "description": "Record step minutes"
              },
              "thresholds": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 100
                },
                "maxItems": 3,
                "description": "Thresholds"
              },
              "min_allowed_days": {
                "type": "integer",
                "minimum": 1,
                "maximum": 90,
                "description": "Minimum allowed days"
              },
              "max_days": {
                "type": "integer",
                "minimum": 7,
                "maximum": 365,
                "description": "Maximum days"
              },
              "min_allowed_days_schedule": {
                "type": "integer",
                "minimum": 7,
                "maximum": 60,
                "description": "Minimum allowed days for schedule"
              },
              "max_allowed_days_schedule": {
                "type": "integer",
                "minimum": 14,
                "description": "Maximum allowed days for schedule"
              },
              "min_schedule_day_duration_minutes": {
                "type": "integer",
                "minimum": 30,
                "maximum": 360,
                "description": "Minimum schedule day duration minutes"
              },
              "ignore_savings": {
                "type": "boolean",
                "description": "Ignore savings"
              },
              "max_recommended_shapes": {
                "type": "integer",
                "minimum": 1,
                "maximum": 10,
                "description": "Maximum recommended shapes"
              },
              "shape_compatibility_rule": {
                "type": "string",
                "enum": [
                  "NONE",
                  "SAME",
                  "COMPATIBLE"
                ],
                "description": "Shape compatibility rule"
              },
              "shape_sorting": {
                "type": "string",
                "enum": [
                  "PRICE",
                  "PERFORMANCE"
                ],
                "description": "Shape sorting"
              },
              "use_past_recommendations": {
                "type": "boolean",
                "description": "Use past recommendations"
              },
              "use_instance_tags": {
                "type": "boolean",
                "description": "Use instance tags"
              },
              "analysis_price": {
                "type": "string",
                "enum": [
                  "DEFAULT",
                  "CUSTOMER_MIN",
                  "CUSTOMER_MAX",
                  "CUSTOMER_AVG"
                ],
                "description": "Analysis price"
              },
              "allowed_actions": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Allowed actions"
              },
              "ignore_actions": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Ignored actions"
              },
              "discard_initial_zeros": {
                "type": "boolean",
                "description": "Discard initial zeros"
              },
              "target_timezone_name": {
                "type": "string",
                "description": "Target timezone name"
              },
              "forbid_change_series": {
                "type": "boolean",
                "description": "Forbid change series"
              },
              "forbid_change_family": {
                "type": "boolean",
                "description": "Forbid change family"
              },
              "optimized_aggregation_threshold_days": {
                "type": "integer",
                "description": "Optimized aggregation threshold days"
              },
              "optimized_aggregation_step_minutes": {
                "type": "integer",
                "description": "Optimized aggregation step minutes"
              }
            }
          },
          "last_modified": {
            "type": "string",
            "format": "date-time",
            "description": "Last modified"
          }
        }
      },
      "AlgorithmPostRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Algorithm name"
          },
          "resource_type": {
            "type": "string",
            "description": "Resource type"
          },
          "customer": {
            "type": "string",
            "description": "Customer name"
          },
          "cloud": {
            "type": "string",
            "description": "Cloud provider"
          },
          "licensed": {
            "type": "boolean",
            "description": "If algorithm is licensed"
          },
          "required_data_attributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Required data attributes"
          },
          "metric_attributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Metric attributes"
          },
          "timestamp_attribute": {
            "type": "string",
            "description": "Timestamp attribute"
          },
          "last_modified": {
            "type": "string",
            "format": "date-time",
            "description": "Last modified"
          }
        }
      },
      "AlgorithmPatchRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Algorithm name"
          },
          "metric_format": {
            "type": "object",
            "properties": {
              "delimiter": {
                "type": "string",
                "minLength": 1,
                "maxLength": 2,
                "description": "Delimiter"
              },
              "skipinitialspace": {
                "type": "boolean",
                "description": "Skip initial space"
              },
              "lineterminator": {
                "type": "string",
                "minLength": 1,
                "maxLength": 3,
                "description": "Line terminator"
              },
              "quotechar": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1,
                "description": "Quote character"
              },
              "quoting": {
                "type": "integer",
                "enum": [
                  0,
                  1,
                  2,
                  3
                ],
                "description": "Quoting mode"
              },
              "escapechar": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1,
                "description": "Escape character"
              },
              "doublequote": {
                "type": "boolean",
                "description": "Double quote"
              }
            }
          },
          "required_data_attributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Required data attributes"
          },
          "metric_attributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Metric attributes"
          },
          "timestamp_attribute": {
            "type": "string",
            "description": "Timestamp attribute"
          },
          "clustering_settings": {
            "type": "object",
            "properties": {
              "max_clusters": {
                "type": "integer",
                "minimum": 1,
                "maximum": 10,
                "description": "Maximum clusters"
              },
              "wcss_kmeans_init": {
                "type": "string",
                "enum": [
                  "k-means++",
                  "random"
                ],
                "description": "K-means initialization"
              },
              "wcss_kmeans_max_iter": {
                "type": "integer",
                "minimum": 1,
                "maximum": 1000,
                "description": "K-means maximum iterations"
              },
              "wcss_kmeans_n_init": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100,
                "description": "K-means number of initializations"
              },
              "knee_interp_method": {
                "type": "string",
                "enum": [
                  "interp1d",
                  "polynomial"
                ],
                "description": "Knee interpolation method"
              },
              "knee_polynomial_degree": {
                "type": "integer",
                "minimum": 1,
                "maximum": 20,
                "description": "Knee polynomial degree"
              }
            }
          },
          "recommendation_settings": {
            "type": "object",
            "properties": {
              "record_step_minutes": {
                "type": "integer",
                "minimum": 1,
                "maximum": 60,
                "description": "Record step minutes"
              },
              "thresholds": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 100
                },
                "maxItems": 3,
                "description": "Thresholds"
              },
              "min_allowed_days": {
                "type": "integer",
                "minimum": 1,
                "maximum": 90,
                "description": "Minimum allowed days"
              },
              "max_days": {
                "type": "integer",
                "minimum": 7,
                "maximum": 365,
                "description": "Maximum days"
              },
              "min_allowed_days_schedule": {
                "type": "integer",
                "minimum": 7,
                "maximum": 60,
                "description": "Minimum allowed days for schedule"
              },
              "max_allowed_days_schedule": {
                "type": "integer",
                "minimum": 14,
                "description": "Maximum allowed days for schedule"
              },
              "min_schedule_day_duration_minutes": {
                "type": "integer",
                "minimum": 30,
                "maximum": 360,
                "description": "Minimum schedule day duration minutes"
              },
              "ignore_savings": {
                "type": "boolean",
                "description": "Ignore savings"
              },
              "max_recommended_shapes": {
                "type": "integer",
                "minimum": 1,
                "maximum": 10,
                "description": "Maximum recommended shapes"
              },
              "shape_compatibility_rule": {
                "type": "string",
                "enum": [
                  "NONE",
                  "SAME",
                  "COMPATIBLE"
                ],
                "description": "Shape compatibility rule"
              },
              "shape_sorting": {
                "type": "string",
                "enum": [
                  "PRICE",
                  "PERFORMANCE"
                ],
                "description": "Shape sorting"
              },
              "use_past_recommendations": {
                "type": "boolean",
                "description": "Use past recommendations"
              },
              "use_instance_tags": {
                "type": "boolean",
                "description": "Use instance tags"
              },
              "analysis_price": {
                "type": "string",
                "enum": [
                  "DEFAULT",
                  "CUSTOMER_MIN",
                  "CUSTOMER_MAX",
                  "CUSTOMER_AVG"
                ],
                "description": "Analysis price"
              },
              "allowed_actions": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Allowed actions"
              },
              "ignore_actions": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Ignored actions"
              },
              "discard_initial_zeros": {
                "type": "boolean",
                "description": "Discard initial zeros"
              },
              "target_timezone_name": {
                "type": "string",
                "description": "Target timezone name"
              },
              "forbid_change_series": {
                "type": "boolean",
                "description": "Forbid change series"
              },
              "forbid_change_family": {
                "type": "boolean",
                "description": "Forbid change family"
              },
              "optimized_aggregation_threshold_days": {
                "type": "integer",
                "description": "Optimized aggregation threshold days"
              },
              "optimized_aggregation_step_minutes": {
                "type": "integer",
                "description": "Optimized aggregation step minutes"
              }
            }
          }
        }
      },
      "LicenseModel": {
        "type": "object",
        "properties": {
          "license_key": {
            "type": "string",
            "description": "License key"
          },
          "customers": {
            "type": "object",
            "description": "Customers associated with the license"
          },
          "expiration": {
            "type": "string",
            "format": "date-time",
            "description": "License expiration date"
          },
          "algorithm_mapping": {
            "type": "object",
            "description": "Algorithm mapping"
          },
          "latest_sync": {
            "type": "string",
            "format": "date-time",
            "description": "Latest sync date"
          },
          "allowance": {
            "type": "object",
            "properties": {
              "time_range": {
                "type": "string",
                "description": "Time range"
              },
              "job_balance": {
                "type": "integer",
                "description": "Job balance"
              },
              "balance_exhaustion_model": {
                "type": "string",
                "description": "Balance exhaustion model"
              }
            }
          }
        }
      },
      "ParentModel": {
        "type": "object",
        "properties": {
          "parent_id": {
            "type": "string",
            "description": "Parent ID"
          },
          "customer_id": {
            "type": "string",
            "description": "Customer ID"
          },
          "application_id": {
            "type": "string",
            "description": "Application ID"
          },
          "type": {
            "type": "string",
            "description": "Parent Type"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "meta": {
            "type": "object",
            "description": "Parent meta"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "If parent is deleted"
          },
          "deletion_date": {
            "type": "string",
            "description": "Deletion date (deprecated)"
          },
          "creation_timestamp": {
            "type": "number",
            "description": "Creation timestamp"
          },
          "update_timestamp": {
            "type": "number",
            "description": "Update timestamp"
          },
          "deletion_timestamp": {
            "type": "number",
            "description": "Deletion timestamp"
          },
          "type_scope": {
            "type": "string",
            "description": "Type scope"
          },
          "updated_by": {
            "type": "string",
            "description": "Updated by"
          },
          "created_by": {
            "type": "string",
            "description": "Created by"
          }
        }
      },
      "ParentResizeInsightsModel": {
        "type": "object",
        "properties": {
          "parent_id": {
            "type": "string",
            "description": "Parent ID"
          },
          "cloud": {
            "type": "string",
            "enum": [
              "AWS",
              "AZURE",
              "GOOGLE"
            ],
            "description": "Cloud"
          },
          "total_shapes_available": {
            "type": "number",
            "description": "Total shapes available for cloud"
          },
          "shape_rules": {
            "type": "object",
            "description": "Shapes left after shape rules restrictions",
            "properties": {
              "left_after_allowed_filters": {
                "type": "integer",
                "description": "Allowed shapes left after applying 'allow' filters"
              },
              "discarded_by_deny_filter": {
                "type": "integer",
                "description": "Shapes discarded after applying 'deny' filters"
              },
              "total_shapes_fit": {
                "type": "integer",
                "description": "Resulted number of shapes that can be recommended after applying shape rule settings"
              }
            }
          },
          "algorithm_settings": {
            "type": "object",
            "description": "Algorithm settings that can impact shape selection",
            "properties": {
              "forbid_change_series": {
                "type": "boolean",
                "description": "If forbidden to recommend shapes of different series"
              },
              "forbid_change_family": {
                "type": "boolean",
                "description": "If forbidden to recommend shapes of different family"
              },
              "excluded_by_family": {
                "type": "integer",
                "description": "Number of shapes excluded by family setting"
              },
              "excluded_by_series": {
                "type": "integer",
                "description": "Number of shapes excluded by series setting"
              }
            }
          },
          "available_shapes": {
            "type": "number",
            "description": "Total number of shapes that can be recommended with the given configuration"
          }
        }
      },
      "ApplicationModel": {
        "type": "object",
        "properties": {
          "application_id": {
            "type": "string",
            "description": "Application ID"
          },
          "customer_id": {
            "type": "string",
            "description": "Customer ID"
          },
          "type": {
            "type": "string",
            "description": "Application Type"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "If application is deleted"
          },
          "deletion_date": {
            "type": "string",
            "description": "Deletion date (deprecated)"
          },
          "meta": {
            "type": "object",
            "description": "Application metadata"
          },
          "secret": {
            "type": "string",
            "description": "Path to SSM parameter name"
          },
          "creation_timestamp": {
            "type": "number",
            "description": "Creation timestamp"
          },
          "update_timestamp": {
            "type": "number",
            "description": "Update timestamp"
          },
          "deletion_timestamp": {
            "type": "number",
            "description": "Deletion timestamp"
          },
          "updated_by": {
            "type": "string",
            "description": "Updated by"
          },
          "created_by": {
            "type": "string",
            "description": "Created by"
          }
        }
      },
      "HealthCheckModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Entity id"
          },
          "type": {
            "type": "string",
            "description": "Health check type",
            "enum": [
              "APPLICATION",
              "PARENT",
              "STORAGE",
              "SHAPE",
              "SHAPE_UPDATE_DATE",
              "OPERATION_MODE"
            ]
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Health check details"
          }
        }
      },
      "ApplicationPolicyModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Group policy id"
          },
          "scale_step": {
            "type": "string",
            "description": "Scale Step"
          },
          "cooldown_days": {
            "type": "integer",
            "description": "Cooldown days"
          },
          "tag": {
            "type": "string",
            "description": "Policy tag"
          },
          "type": {
            "type": "string",
            "description": "Group policy tag"
          },
          "thresholds": {
            "type": "object",
            "description": "Group policy thresholds"
          }
        }
      },
      "LicenceManagerConfigModel": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "License Manager Host"
          },
          "stage": {
            "type": "string",
            "description": "License Manager stage (url prefix)"
          },
          "port": {
            "type": "integer",
            "description": "License Manager port"
          },
          "protocol": {
            "type": "string",
            "enum": [
              "HTTPS",
              "HTTP"
            ],
            "description": "License Manager protocol"
          }
        }
      },
      "LicenceManagerClientModel": {
        "type": "object",
        "properties": {
          "key_id": {
            "type": "string",
            "description": "License Manager Client Key ID"
          },
          "algorithm": {
            "type": "string",
            "description": "Key algorithm"
          },
          "format": {
            "type": "string",
            "enum": [
              "PEM"
            ],
            "description": "Kep format"
          },
          "b64_encoded": {
            "type": "boolean",
            "description": "If key is encoded"
          },
          "puk": {
            "type": "string",
            "description": "Key puk"
          }
        }
      },
      "RoleResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleModel"
            }
          }
        }
      },
      "PolicyResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyModel"
            }
          }
        }
      },
      "SettingResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettingModel"
            }
          }
        }
      },
      "StorageResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StorageModel"
            }
          }
        }
      },
      "StorageDataResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StorageDataModel"
            }
          }
        }
      },
      "JobResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobModel"
            }
          }
        }
      },
      "JobReportResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobReportModel"
            }
          }
        }
      },
      "JobPostRequest": {
        "type": "object",
        "properties": {
          "application_id": {
            "type": "string",
            "description": "Application ID"
          },
          "parent_id": {
            "type": "string",
            "description": "Parent ID"
          },
          "tenants": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Job owner"
          },
          "scan_from_date": {
            "type": "string",
            "format": "date-time",
            "description": "Scan start date"
          },
          "scan_to_date": {
            "type": "string",
            "format": "date-time",
            "description": "Scan end date"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User ID"
          },
          "custom:customer": {
            "type": "string",
            "description": "Customer associated with the user"
          },
          "custom:role": {
            "type": "string",
            "description": "Role associated with the user"
          }
        }
      },
      "UserPatchRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username"
          },
          "password": {
            "type": "string",
            "description": "Password to set"
          }
        }
      },
      "ShapeResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShapeModel"
            }
          }
        }
      },
      "ShapeRulePostRequest": {
        "type": "object",
        "properties": {
          "parent_id": {
            "type": "string",
            "description": "Shape rule Parent ID"
          },
          "action": {
            "type": "string",
            "enum": [
              "allow",
              "deny",
              "prioritize"
            ],
            "description": "Shape rule action"
          },
          "condition": {
            "type": "string",
            "enum": [
              "contains",
              "not_contains",
              "equals",
              "matches",
              "not_matches"
            ],
            "description": "Shape rule condition"
          },
          "field": {
            "type": "string",
            "enum": [
              "name",
              "family_type",
              "equals",
              "physical_processor",
              "architecture"
            ],
            "description": "Shape rule target field"
          },
          "value": {
            "type": "string",
            "description": "Shape rule condition value"
          }
        }
      },
      "ShapeRulePatchRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Shape rule ID"
          },
          "parent_id": {
            "type": "string",
            "description": "Shape rule Parent ID"
          },
          "action": {
            "type": "string",
            "enum": [
              "allow",
              "deny",
              "prioritize"
            ],
            "description": "Shape rule action"
          },
          "condition": {
            "type": "string",
            "enum": [
              "contains",
              "not_contains",
              "equals",
              "matches",
              "not_matches"
            ],
            "description": "Shape rule condition"
          },
          "field": {
            "type": "string",
            "enum": [
              "name",
              "family_type",
              "equals",
              "physical_processor",
              "architecture"
            ],
            "description": "Shape rule target field"
          },
          "value": {
            "type": "string",
            "description": "Shape rule condition value"
          }
        }
      },
      "ShapeRuleResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShapeRuleModel"
            }
          }
        }
      },
      "ShapeRuleDryRunResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShapeRuleDryRunModel"
            }
          }
        }
      },
      "ShapePostRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Shape name"
          },
          "resource_type": {
            "type": "string",
            "enum": [
              "VM",
              "RDS"
            ],
            "description": "Resource type"
          },
          "cloud": {
            "type": "string",
            "enum": [
              "AWS",
              "AZURE",
              "GOOGLE"
            ],
            "description": "Cloud provider"
          },
          "cpu": {
            "type": "number",
            "format": "float",
            "description": "CPU cores"
          },
          "memory": {
            "type": "number",
            "format": "float",
            "description": "Memory (in GB)"
          },
          "network_throughput": {
            "type": "number",
            "format": "float",
            "description": "Network throughput (in Mbps)"
          },
          "iops": {
            "type": "number",
            "format": "float",
            "description": "IOPS"
          },
          "family_type": {
            "type": "string",
            "description": "Family type"
          },
          "physical_processor": {
            "type": "string",
            "description": "Physical processor"
          },
          "architecture": {
            "type": "string",
            "description": "Architecture"
          },
          "engines": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Supported engines"
          },
          "storage_types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Supported storage types"
          }
        }
      },
      "ShapePatchRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Shape name"
          },
          "resource_type": {
            "type": "string",
            "enum": [
              "VM",
              "RDS"
            ],
            "description": "Resource type"
          },
          "cloud": {
            "type": "string",
            "enum": [
              "AWS",
              "AZURE",
              "GOOGLE"
            ],
            "description": "Cloud provider"
          },
          "cpu": {
            "type": "number",
            "format": "float",
            "description": "CPU cores"
          },
          "memory": {
            "type": "number",
            "format": "float",
            "description": "Memory (in GB)"
          },
          "network_throughput": {
            "type": "number",
            "format": "float",
            "description": "Network throughput (in Mbps)"
          },
          "iops": {
            "type": "number",
            "format": "float",
            "description": "IOPS"
          },
          "family_type": {
            "type": "string",
            "description": "Family type"
          },
          "physical_processor": {
            "type": "string",
            "description": "Physical processor"
          },
          "architecture": {
            "type": "string",
            "description": "Architecture"
          },
          "engines": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Supported engines"
          },
          "storage_types": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Supported storage types"
          }
        }
      },
      "ShapePriceResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShapePriceModel"
            }
          }
        }
      },
      "ShapePricePostRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Shape name"
          },
          "cloud": {
            "type": "string",
            "enum": [
              "AWS",
              "GCP",
              "AZURE"
            ],
            "description": "Cloud provider"
          },
          "region": {
            "type": "string",
            "description": "Cloud Provider Region"
          },
          "customer": {
            "type": "string",
            "description": "Customer name"
          },
          "os": {
            "type": "string",
            "enum": [
              "WINDOWS",
              "LINUX"
            ],
            "description": "Operating system"
          },
          "on_demand": {
            "type": "number",
            "format": "float",
            "description": "On-demand price"
          }
        }
      },
      "ShapePricePatchRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Shape name"
          },
          "cloud": {
            "type": "string",
            "enum": [
              "AWS",
              "GCP",
              "AZURE"
            ],
            "description": "Cloud provider"
          },
          "region": {
            "type": "string",
            "description": "Cloud Provider Region"
          },
          "customer": {
            "type": "string",
            "description": "Customer name"
          },
          "os": {
            "type": "string",
            "enum": [
              "WINDOWS",
              "LINUX"
            ],
            "description": "Operating system"
          },
          "on_demand": {
            "type": "number",
            "format": "float",
            "description": "On-demand price"
          }
        }
      },
      "RecommendationHistoryResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecommendationHistoryModel"
            }
          }
        }
      },
      "AlgorithmResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlgorithmModel"
            }
          }
        }
      },
      "LicenseResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseModel"
            }
          }
        }
      },
      "LicenseSyncRequest": {
        "type": "object",
        "properties": {
          "license_key": {
            "type": "string",
            "description": "License key"
          }
        }
      },
      "ParentResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParentModel"
            }
          }
        }
      },
      "ParentResizeInsightsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParentResizeInsightsModel"
            }
          }
        }
      },
      "ParentPostRequest": {
        "type": "object",
        "properties": {
          "application_id": {
            "type": "string",
            "description": "Application ID"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "tenant": {
            "type": "string",
            "description": "Tenant name"
          },
          "scope": {
            "type": "string",
            "description": "Scope",
            "enum": [
              "ALL",
              "SPECIFIC",
              "DISABLED"
            ]
          }
        }
      },
      "ParentDojoPostRequest": {
        "type": "object",
        "properties": {
          "application_id": {
            "type": "string",
            "description": "DEFECT_DOJO Application ID"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "tenant": {
            "type": "string",
            "description": "Tenant name"
          },
          "scope": {
            "type": "string",
            "description": "Scope",
            "enum": [
              "ALL",
              "SPECIFIC",
              "DISABLED"
            ]
          }
        }
      },
      "ApplicationResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationModel"
            }
          }
        }
      },
      "ApplicationPolicyResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationPolicyModel"
            }
          }
        }
      },
      "ApplicationPolicyPostRequest": {
        "type": "object",
        "properties": {
          "application_id": {
            "type": "string",
            "description": "Application id to add policy to"
          },
          "tag": {
            "type": "string",
            "description": "Policy tag"
          },
          "cooldown_days": {
            "type": "integer",
            "description": "Cooldown days"
          },
          "scale_step": {
            "type": "string",
            "description": "Scale Step"
          },
          "type": {
            "type": "string",
            "description": "Group policy tag"
          },
          "thresholds": {
            "type": "object",
            "description": "Group policy thresholds"
          }
        }
      },
      "RIGHTSIZERApplicationPostRequest": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "string",
            "description": "Customer ID"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "meta": {
            "type": "object",
            "description": "Application metadata",
            "properties": {
              "input_storage": {
                "type": "string",
                "description": "Data source ID"
              },
              "output_storage": {
                "type": "string",
                "description": "Results storage ID"
              },
              "username": {
                "type": "string",
                "description": "Integration username"
              },
              "password": {
                "type": "string",
                "description": "Integration password"
              },
              "host": {
                "type": "string",
                "description": "R8S Host"
              },
              "port": {
                "type": "string",
                "description": "R8S port"
              },
              "protocol": {
                "type": "string",
                "description": "R8S protocol",
                "enum": [
                  "HTTP",
                  "HTTPS"
                ]
              }
            }
          }
        }
      },
      "ApplicationPatchRequest": {
        "type": "object",
        "properties": {
          "application_id": {
            "type": "string",
            "description": "Application ID"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "meta": {
            "type": "object",
            "description": "Application metadata"
          }
        }
      },
      "ApplicationLicensesPostRequest": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "string",
            "description": "Customer id to activate license for"
          },
          "description": {
            "type": "string",
            "description": "RIGHTSIZER_LICENSES Application description"
          },
          "cloud": {
            "type": "string",
            "description": "License cloud",
            "enum": [
              "AWS",
              "AZURE",
              "GOOGLE"
            ]
          },
          "tenant_license_key": {
            "type": "string",
            "description": "Tenant license key"
          }
        }
      },
      "ApplicationDojoPostRequest": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "string",
            "description": "Customer id to activate Defect Dojo for"
          },
          "description": {
            "type": "string",
            "description": "DEFECT_DOJO Application description"
          },
          "host": {
            "type": "string",
            "description": "DEFECT_DOJO Host"
          },
          "port": {
            "type": "integer",
            "description": "DEFECT_DOJO port"
          },
          "protocol": {
            "type": "string",
            "description": "Protocol",
            "enum": [
              "HTTPS",
              "HTTP"
            ]
          },
          "stage": {
            "type": "string",
            "description": "Defect Dojo stage (url prefix)"
          },
          "api_key": {
            "type": "string",
            "description": "Defect Dojo api key"
          }
        }
      },
      "SignInRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username"
          },
          "password": {
            "type": "string",
            "description": "Password"
          }
        }
      },
      "SignInResponse": {
        "type": "object",
        "properties": {
          "api_link": {
            "type": "string",
            "description": "R8s API link"
          },
          "access_token": {
            "type": "string",
            "description": "R8s access token"
          }
        }
      },
      "SignUpRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username"
          },
          "password": {
            "type": "string",
            "description": "User password to set"
          },
          "customer": {
            "type": "string",
            "description": "Customer to associate with user"
          },
          "role": {
            "type": "string",
            "description": "Role to associate with user"
          }
        }
      },
      "HealthCheckRequest": {
        "type": "object",
        "properties": {
          "check_type": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPLICATION",
                "PARENT",
                "STORAGE",
                "SHAPE",
                "OPERATION_MODE",
                "SHAPE_UPDATE_DATE"
              ]
            },
            "description": "List of health check types to perform"
          }
        },
        "example": {
          "check_type": ["APPLICATION", "PARENT", "STORAGE", "SHAPE", "OPERATION_MODE", "SHAPE_UPDATE_DATE"]
        }
      },
      "TenantMailReportRequest": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "string",
            "description": "Customer id to generate report for"
          },
          "tenants": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tenants to generate report for"
          }
        }
      },
      "LicenceManagerConfigResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenceManagerConfigModel"
            }
          }
        }
      },
      "LicenceManagerClientRequest": {
        "type": "object",
        "properties": {
          "key_id": {
            "type": "string",
            "description": "License Manager Client Key ID"
          },
          "algorithm": {
            "type": "string",
            "description": "Key algorithm"
          },
          "format": {
            "type": "string",
            "enum": [
              "PEM"
            ],
            "description": "Kep format"
          },
          "b64_encoded": {
            "type": "boolean",
            "description": "If key is encoded"
          },
          "private_key": {
            "type": "string",
            "description": "Private key"
          }
        }
      },
      "LicenceManagerClientResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenceManagerClientModel"
            }
          }
        }
      },
      "HealthCheckResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthCheckModel"
            }
          }
        }
      }
    },
    "responses": {
      "NotFoundResponse": {
        "description": "Entity not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotFoundErrorResponse"
            },
            "example": {
              "message": "No role found matching given query.",
              "code": 404
            }
          }
        },
        "headers": {
          "Access-Control-Allow-Origin": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "DeletedResponse": {
        "description": "Entity has been deleted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MessageResponse"
            },
            "example": {
              "message": "Role 'role1' has been deleted.",
              "code": 200
            }
          }
        },
        "headers": {
          "Access-Control-Allow-Origin": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "UnauthorizedResponse": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UnauthorizedErrorResponse"
            },
            "example": {
              "message": "Unauthorized.",
              "code": 401
            }
          }
        },
        "headers": {
          "Access-Control-Allow-Origin": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "ForbiddenResponse": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ForbiddenErrorResponse"
            },
            "example": {
              "message": "User 'user1' is not allowed to the resource '/roles'",
              "code": 403
            }
          }
        },
        "headers": {
          "Access-Control-Allow-Origin": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "InternalServerErrorResponse": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InternalServerErrorResponse"
            },
            "example": {
              "message": "Internal Server Error",
              "code": 500
            }
          }
        },
        "headers": {
          "Access-Control-Allow-Origin": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "BadRequestErrorResponse": {
        "description": "Bad Request Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BadRequestErrorResponse"
            },
            "example": {
              "message": "Bad Request. The following parameters are missing: ['expiration', 'policies']",
              "code": 400
            }
          }
        },
        "headers": {
          "Access-Control-Allow-Origin": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "EmptyResponse": {
        "description": "Response with no content",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Empty"
            }
          }
        },
        "headers": {
          "Access-Control-Allow-Origin": {
            "schema": {
              "type": "string"
            }
          },
          "Access-Control-Allow-Methods": {
            "schema": {
              "type": "string"
            }
          },
          "Access-Control-Allow-Headers": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "authorizer": []
    }
  ]
}
